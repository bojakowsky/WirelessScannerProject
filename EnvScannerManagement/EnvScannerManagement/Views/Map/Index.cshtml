@model IEnumerable<Database.General>
@using Newtonsoft.Json
@{
    Layout = null;
}
<!DOCTYPE html>
<html>
<head>
    <title>Simple Map</title>
    <meta name="viewport" content="initial-scale=1.0">
    <meta charset="utf-8">

    <link href="@Url.Content("~/Content/animate.css")" rel="stylesheet" type="text/css" />
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
    @Styles.Render("~/Content/css")
    @Scripts.Render("~/bundles/modernizr")
    @Styles.Render("~/Content/jquery.datetimepicker.min.css")

</head>
<body>
    <div class="fixed-menu-bar animated fadeInLeft">
        <div class="col-xs-4 no-padding centered-icon back">
            <a href="/"><i class="material-icons">arrow_back</i></a>
</div>
        <div class="col-xs-4 no-padding" style="overflow:hidden;">
            <a href="/"><img style="    height: 100px;" class="logo" src="~/images/logo.svg" /></a>
        </div>
        <div class="col-xs-4 centered-icon no-padding" id="showMenu" style="background:#333;">
            <a id="hamburger-icon" href="#" title="Menu">
                <span class="line line-1"></span>
                <span class="line line-2"></span>
                <span class="line line-3"></span>
            </a>
        </div>
    </div>
    <div class="fixed-menu">
        <div class="row">
            <div class="col-xs-12">
                <i id="closeMenu" class=" close-menu glyphicon glyphicon-remove close-menu-on-map"></i>
            </div>
        </div>
        <div class="row filters" style="margin-top:30px;">
            <div class="col-xs-12">
                <h3>Markers</h3>
            </div>
            <div class="col-xs-12">
                <button class="btn btn-default m-t-xs" onclick="clearMarkers();"><i class="material-icons">visibility_off</i> Hide</button>
                <button class="btn btn-default m-t-xs" onclick="showMarkers();"><i class="material-icons">visibility</i> All</button>
                <button class="btn btn-default m-t-xs" onclick="showEmpties();"><i class="material-icons">crop_free</i> Empty</button>
            </div>
            <div class="col-xs-12">
                <button class="btn btn-primary m-t-xs" onclick="showWifis();"><i class="material-icons">wifi</i> WiFi</button>
                <button class="btn btn-primary m-t-xs" onclick="showBluetooths();"><i class="material-icons">bluetooth</i> Bluetooth</button>
                <button class="btn btn-primary m-t-xs" onclick="showBluetooths();"><i class="material-icons">wifi_tethering</i> Hotspots</button>
            </div>
        </div>

        <div class="row" style="margin-top:30px;">
            <div class="col-xs-12">
                <h3>Date & time</h3>
            </div>
            <div class="col-xs-12">
                <input type="text" class="form-control" name="filter-date" id="filter-date-from" placeholder="From" />
                <input style="margin-top:5px;" type="text" class="form-control" name="filter-date" id="filter-date-to" placeholder="To" />
            </div>
            <div class="col-xs-12" style="margin-top:5px;">
                <button class="btn btn-primary pull-right" onclick="filterDateAndTime()"><i class="material-icons">filter_list</i> Filter</button>
            </div>
        </div>

        <div class="row" style="margin-top:30px;">
            <div class="col-xs-12">
                <h3>Device</h3>
            </div>
            <div class="col-xs-12">
                <input type="text" class="form-control" placeholder="Device ID" id="deviceId" />
            </div>
            <div class="col-xs-12" style="margin-top:5px;">
                <button class="btn btn-primary pull-right" onclick="filterByDeviceId()"><i class="material-icons">search</i> Search</button>
            </div>
        </div>

        <div class="row" style="margin-top:30px;">
            <div class="col-xs-12">
                <h3>Go to</h3>
            </div>
            <div class="col-xs-12">
                <input type="text" class="form-control" id="lat" placeholder="Lat" />
                <input style="margin-top:5px;" class="form-control" type="text" id="lang" placeholder="Lang" />
            </div>
            <div class="col-xs-12" style="margin-top:5px;">
                <button class="btn btn-primary pull-right" onclick="goToLatLang()"><i class="material-icons">gps_fixed</i> Go</button>
            </div>
        </div>

    </div>

    <!-- id="MainPanel"
    <input onchange="togglePanelVisibility();" type="checkbox" value="Hide Panels" />
    <div id="MarkerPanel"> -->




    <div id="map"></div>

    <script>
        //Google Maps API map, markers, infoWindows initialization
        var data;
        var map;
        var markers = [];
        data = @Html.Raw(JsonConvert.SerializeObject(this.Model, new JsonSerializerSettings {
                        ReferenceLoopHandling = ReferenceLoopHandling.Ignore
                }));

        function showMore(data){
            if (data.NumberOfWifiConnections > 0 || data.NumberOfBtConnections > 0)
                $.ajax({
                type: 'GET',
                    url: 'Map/GetDetails',
                    contentType: 'json',
                    data: { generalId: data.Id },
                    success: function(response, textStatus, jqXHR){
                    addResponseToContent(response)
                    },
                    error: function(jqXHR, textStatus, errorThrown){
                    // error occured, no need to be handled
                    console.log("Something went wrong with getting details.")
                    }
            });
        }

        function addResponseToContent(response){
            content = ""
            if (response.wifi.length > 0){
                content += "<div class='row marker-info m-t-md'><div class='col-xs-12 column'><strong>WIFIs </strong><div/>"
                for (var j = 0 ; j < response.wifi.length; j++)
                {
                    content = content + 
                        "<div class='row marker-info m-t-sm'><div class='col-xs-12 column'><strong><i class='material-icons'>storage</i> BSSID: </strong>" + response.wifi[j].BSSID + "<div/>"
                        +"<div class='row marker-info m-t-xs'><div class='col-xs-12 column'><strong><i class='material-icons'>wifi_tethering</i> SSID: </strong>" + response.wifi[j].SSID + "<div/>"
                        +"<div class='row marker-info m-t-xs'><div class='col-xs-12 column'><strong><i class='material-icons'>wifi_lock</i> Security: </strong>" + response.wifi[j].Security + "<div/>"
                        +"<div class='row marker-info m-t-xs'><div class='col-xs-12 column'><strong><i class='material-icons'>graphic_eq</i> Frequency: </strong>" + response.wifi[j].Frequency + "<div/>"
                        +"<div class='row marker-info m-t-xs'><div class='col-xs-12 column'><strong><i class='material-icons'>signal_cellular_4_bar</i> Level: </strong>" + response.wifi[j].Level + "<div/>"
                        +"<div class='row marker-info m-t-xs'><div class='col-xs-12 column'><strong><i class='material-icons'>today</i> Timestamp: </strong>" + response.wifi[j].Timestamp + "<div/>"
                }
            }


            if (response.bt.length > 0){
                content += "<div class='row marker-info m-t-md'><div class='col-xs-12 column'><strong>Bluetooths </strong><div/>"
                for (var j = 0 ; j < response.bt.length; j++)
                {
                    content = content +
                        "<div class='row marker-info m-t-sm'><div class='col-xs-12 column'><strong><i class='material-icons'>storage</i> BSSID: </strong>" + response.bt[j].DeviceName + "<div/>"
                        +"<div class='row marker-info m-t-xs'><div class='col-xs-12 column'><strong><i class='material-icons'>wifi_tethering</i> SSID: </strong>" + response.bt[j].MAC + "<div/>"
                }
            }
            infowindow.setContent(infowindow.content + content)
        }

        function initMap() {
            var latlng = new google.maps.LatLng(data[0].GPSlatitude, data[0].GPSLongtitude);
            var myOptions = {
                zoom: 10,
                center: latlng,
                mapTypeId: google.maps.MapTypeId.SATELLITE,
                scaleControl: true
            };

            map = new google.maps.Map(document.getElementById("map"), myOptions);

            for (var i = 0; i < data.length; i++) {
                var iconToBeSet = '';
                if (data[i].NumberOfWifiConnections > 0 && data[i].NumberOfBtConnections > 0)
                    iconToBeSet = '../Content/MapIcons/marker-wifibt.png';
                else if (data[i].NumberOfWifiConnections > 0 && data[i].NumberOfBtConnections == 0)
                    iconToBeSet = '../Content/MapIcons/marker-wifi.png';
                else if (data[i].NumberOfWifiConnections == 0 && data[i].NumberOfBtConnections > 0)
                    iconToBeSet = '../Content/MapIcons/marker-bt.png';
                else iconToBeSet = '../Content/MapIcons/marker-empty.png';

                marker = new google.maps.Marker({
                    map: map,
                    position: new google.maps.LatLng(data[i].GPSlatitude, data[i].GPSLongtitude),
                    icon: iconToBeSet
                });
                markers.push(marker);

                (function (i, marker) {

                    google.maps.event.addListener(marker, 'click', function () {
                        if (typeof infowindow !== 'undefined') infowindow.close()
                        infowindow = new google.maps.InfoWindow();
                        var content =
                            "<div class='row marker-info'><div class='col-xs-12 column'><strong><i class='material-icons'>devices</i> Device Id: </strong>" + data[i].DeviceId + "<div/>"
                            +"<div class='row marker-info m-t-xs'><div class='col-xs-12 column'><strong><i class='material-icons'>explore</i> Latitude: </strong>" + data[i].GPSlatitude + 
                            "<br /><strong style='margin-left: 23.5px;'>Longtitude: </strong>"+data[i].GPSlatitude +"<div/>"
                            +"<div class='row marker-info'><div class='col-xs-12 column'><strong><i class='material-icons'>date_range</i> Date and time: </strong>" + new Date(data[i].DateAndTime)+ "<div/>"
                            +"<div class='column col-xs-6 m-t-sm'><strong><i class='material-icons'>wifi</i> " + data[i].NumberOfWifiConnections +"</strong></div>"
                             +"<div class='column col-xs-6 m-t-sm'><strong><i class='material-icons'>bluetooth</i> " + data[i].NumberOfBtConnections +"</strong></div>"
                            +"<div class='column col-xs-12 m-t-sm'><a href='#' onclick='return showMore(data["+i+"]);'><button class='btn btn-primary btn-xs'><i class='material-icons'>more_horiz</i>Show more</button></a></div></div>"

                        infowindow.setContent(content);
                        infowindow.open(map, marker);

                    });

                })(i, marker);

            }
        }

        // Sets the map on all markers in the array.
        function setMapOnAll(map) {
            for (var i = 0; i < markers.length; i++) {
                markers[i].setMap(map);
            }
        }

        function showWifis(){
            for (var i = 0; i < markers.length; i++) {
                if (data[i].NumberOfWifiConnections > 0)
                    markers[i].setMap(map);
                else markers[i].setMap(null);
            }
        }

        function showBluetooths(){
            for (var i = 0; i < markers.length; i++) {
                if (data[i].NumberOfBtConnections > 0)
                    markers[i].setMap(map);
                else markers[i].setMap(null);
            }
        }

        function showEmpties(){
            for (var i = 0; i < markers.length; i++) {
                if (data[i].NumberOfWifiConnections == 0 && data[i].NumberOfBtConnections == 0)
                    markers[i].setMap(map);
                else markers[i].setMap(null);
            }
        }

        //Panels
        function togglePanelVisibility()
        {
            var markerPanel = document.getElementById("MarkerPanel");
            markerPanel.hidden = !markerPanel.hidden;

            var PrevNextMarkerPanel = document.getElementById("PrevNextMarkerPanel");
            PrevNextMarkerPanel.hidden = !PrevNextMarkerPanel.hidden;
        }

        function clearMarkers(){
            setMapOnAll(null);
        }

        function showMarkers(){
            setMapOnAll(map);
        }

        function filterDateAndTime(){
            dateFrom = new Date($("#filter-date-from").val())
            dateTo = new Date($("#filter-date-to").val())
            for (var i = 0; i < markers.length; i++) {
                d = new Date(data[i].DateAndTime)
                if (d >= dateFrom && d <= dateTo)
                    markers[i].setMap(map);
                else markers[i].setMap(null);
            }
        }

        function filterByDeviceId(){
            devId = $("#deviceId").val()
            for (var i = 0; i < markers.length; i++) {
                if (devId == data[i].DeviceId)
                    markers[i].setMap(map);
                else markers[i].setMap(null);
            }
        }

        function goToLatLang(){
            lat = $("#lat").val()
            lang = $("#lang").val()

            if (!isNaN(lat) && !isNaN(lang))
                map.setCenter(new google.maps.LatLng(lat, lang))
        }

    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyC4f8WgskI1t9Np7UVijjIQY4LF54yObA4&callback=initMap" async defer></script>
    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/Content/jquery.datetimepicker.full.js")
    <script>
        jQuery(document).ready(function () {
            'use strict';

            jQuery('#filter-date-from, #filter-date-to, #search-from-date, #search-to-date').datetimepicker();
            $("#showMenu").click(function(){
                if($(".fixed-menu").hasClass('menu-expanded')){
                    $("#hamburger-icon").toggleClass('active');
                    $(".fixed-menu").css('right','-300px');
                    $(".fixed-menu").removeClass('menu-expanded');
                } else {
                    $("#hamburger-icon").toggleClass('active');
                    $(".fixed-menu").css('right','0px');
                    $(".fixed-menu").toggleClass('menu-expanded');
                }
            })
            $("#closeMenu").click(function(){
                if($(".fixed-menu").hasClass('menu-expanded')){
                    $("#hamburger-icon").toggleClass('active');
                    $(".fixed-menu").css('right','-300px');
                    $(".fixed-menu").removeClass('menu-expanded');
                } else {
                    $(".fixed-menu").css('right','0px');
                    $(".fixed-menu").toggleClass('menu-expanded')
                    $("#hamburger-icon").toggleClass('active');;
                }
            })
        });
    </script>
</body>
</html>